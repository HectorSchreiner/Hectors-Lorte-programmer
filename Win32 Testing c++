#include <Windows.h>



int main() 
{

	const wchar_t WinClassStructure[] = L"Sample WIndow Class";

	WNDCLASS wc = { 0 };

	wc.lpfnWndProc = DefWindowProc; // window procedure
	wc.hInstance = GetModuleHandle(nullptr);
	HINSTANCE hInstance = GetModuleHandle(nullptr);
	wc.lpszClassName = WinClassStructure;

	RegisterClass(&wc);

	wchar_t lpText[] = L"HelloWorld!";
	wchar_t lpCaption[] = L"HelloWorld!";

	HWND hwnd = CreateWindowEx(
		0,                   //window styles "optional"
		WinClassStructure,   // window class
		L"Hello World!",     // Window text
		WS_OVERLAPPEDWINDOW, // Window style

		// size and position
		100, 100, 500, 500,

		NULL,       // Parent window    
		NULL,       // Menu
		hInstance,  // Instance handle
		NULL        // Additional application data
		);

		
	 if (hwnd == NULL) 
	{
		return 0;
	}


	     MessageBox(
		 hwnd,
		 lpText,
		 lpCaption,
		 MB_OK
	 );
	
	MSG msg;

	ShowWindow(hwnd, SW_SHOW);

	while (GetMessage(&msg, NULL, 0, 0) > 0) {
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

}
void OnSize(HWND hwnd, UINT flag, int width, int height)
{

}
LRESULT CALLBACK WindowsProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	switch(uMsg)
	{
	case WM_SIZE:
		{
			int width = LOWORD(lParam); //macro to get low-order word
			int height = HIWORD(lParam);// Macro to get the high-order word.

			//response to given message
			OnSize(hwnd, (UINT)wParam, width, height);

		}
		break;

	case WM_PAINT: 
	{	
		PAINTSTRUCT ps;
		HDC hdc = BeginPaint(hwnd, &ps);

		// All Paint occurs here, betwen Beginpaint and Endpaint
		FillRect(hdc, &ps.rcPaint, (HBRUSH)(COLOR_WINDOW + 1));
		EndPaint(hwnd, &ps);
	}	
	
	}
	return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
